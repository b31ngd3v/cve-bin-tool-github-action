import argparse
import json
from pathlib import Path
import subprocess

ROOT = Path(__file__).parent.parent
SARIF_TEMPLATE_FILE = ROOT / "template" / "sarif.json"

class GenerateSarif:
    def __init__(self, repository, action_run_id, output_file, reports_only=False) -> None:
        self.output_file = self.set_output(output_file)
        self.repository = repository
        self.action_run_id = action_run_id
        self.reports_only = reports_only
        self.sarif_file = {}
        self.load_sample_sarif_file()
        self.set_cve_bin_tool_version()
        if (self.reports_only):
            self.add_report_result()

    def load_sample_sarif_file(self):
        with open(SARIF_TEMPLATE_FILE) as fd:
            self.sarif_file = json.load(fd)

    def set_cve_bin_tool_version(self):
        cve_bin_tool_version = subprocess.check_output(['cve-bin-tool', '--version']).strip().decode('utf-8')
        self.sarif_file['runs'][0]['tool']['driver']['semanticVersion'] = cve_bin_tool_version

    def add_report_result(self):
        report_result = {
          "ruleId": "@cve-bin-tool/html_pdf_report",
          "message": {
            "text": f"Here is the HTML & PDF Scan Reports: [https://github.com/{self.repository}/actions/runs/{self.action_run_id}](https://github.com/{self.repository}/actions/runs/{self.action_run_id}). To download the reports, first click on the link and scroll down to the 'Artifacts' section then click on 'cve_reports'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "*"
                }
              }
            }
          ]
        }
        self.sarif_file['runs'][0]['results'].append(report_result)

    def set_output(self, output):
        if Path(args.output).is_dir():
            output_file = Path(output) / "scan-report.sarif"
        else:
            if args.output.endswith('.sarif'):
                output_file = Path(output)
            else:
                output_file = Path(f"{output}.sarif")
        return output_file

    def write_file(self):
        with open(self.output_file, 'w+') as fd:
            fd.write(json.dumps(self.sarif_file))


parser = argparse.ArgumentParser(
    prog='generate-sarif',
    description='Generate Sarif for CVE Binary Tool GitHub Action',
)

parser.add_argument('-r', '--repo', required=True)
parser.add_argument('-R', '--run-id', required=True)
parser.add_argument('-o', '--output', required=True)
parser.add_argument('--reports-only', action='store_true', default=False)

args = parser.parse_args()

gen_sarif = GenerateSarif(repository=args.repo, action_run_id=args.run_id, output_file=args.output, reports_only=args.reports_only)
gen_sarif.write_file()
