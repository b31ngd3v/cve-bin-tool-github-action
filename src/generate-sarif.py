import argparse
import json
from pathlib import Path
import subprocess

ROOT = Path(__file__).parent.parent
SARIF_TEMPLATE_FILE = ROOT / "template" / "sarif.json"

parser = argparse.ArgumentParser(
    prog='generate-sarif',
    description='Generate Sarif for CVE Binary Tool GitHub Action',
)

parser.add_argument('-r', '--repo', required=True)
parser.add_argument('-R', '--run-id', required=True)
parser.add_argument('-o', '--output', required=True)
parser.add_argument('--reports-only', action='store_true', default=False)

args = parser.parse_args()

with open(SARIF_TEMPLATE_FILE) as fd:
    sarif_file = json.load(fd)

cve_bin_tool_version = subprocess.check_output(['cve-bin-tool', '--version']).strip().decode('utf-8')
sarif_file['runs'][0]['tool']['driver']['semanticVersion'] = cve_bin_tool_version

if (args.reports_only):
    report_result = {
      "ruleId": "@cve-bin-tool/html_pdf_report",
      "message": {
        "text": f"Here is your HTML & PDF Scan Reports: [https://github.com/{args.repo}/actions/runs/{args.run_id}](https://github.com/{args.repo}/actions/runs/{args.run_id}). To download the reports, click on the link and scroll down to the `Artifacts` section then click on `cve_reports`."
      },
      "locations": [
        {
          "physicalLocation": {
            "artifactLocation": {
              "uri": "*"
            }
          }
        }
      ]
    }
    sarif_file['runs'][0]['results'].append(report_result)

if Path(args.output).is_dir():
    output_file = Path(args.output) / "scan-report.sarif"
else:
    if args.output.endswith('.sarif'):
        output_file = Path(args.output)
    else:
        output_file = Path(f"{args.output}.sarif")

with open(output_file, 'w+') as fd:
    fd.write(json.dumps(sarif_file))
